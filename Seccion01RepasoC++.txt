
Comenzaremos con la intro al lenguaje C++.Veremos los siguientes fundamentos:

1- Estructura de un programa en C++
2- Conceptos de entrada y salida (I/O)
3- Tipado de Datos y Variables
4- Vectores multidimensionales y monodimensionales
5- Sentencias Condicionales 
6- Bucles
7- Tuplas

					VIDEO 66 CONCEPTOS ESENCIALES

Algoritmo: un algoritmo no es más que un método para resolver un problema.Normalmente se describe como una secuencia de pasos

Lenguaje de programación: es un "idioma" usado para describir/mandar instrucciones a un ordenador.Esta compuesto de datos e instrucciones.
Los lenguajes de programación tienen una sintaxis y semántica muy estrictas

Programa de ordenador: no es más que un algoritmo(mejor una secuencia de instrucciones) escrito en un lenguaje de programación que ejecuta una cierta tarea:
calcular una raiz cuadrada
calcular el nº de veces que aparece una palabra en un libro
reproducir un archivo de musica
calcular el camino más corto entre dos ciudades

NOTA: los ordenadores sólo entienden instrucciones de muy bajo nivel(lenguaje máquina) mientras que el software está usualmente construido usando lenguajes de alto nivel.
Un lenguaje de alto nivel tiene:
1- Mayor productividad
2- Mayor legibilidad
4- Compilación más simple(y más rápida)
IMPORTANTE: el compilador de cada lenguaje traduce un lenguaje de alto nivel a lenguaje máquina automáticamente(el lenguaje máquina son 0s y 1s,es decir a binario)

					INSTALACIONES NECESARIAS

El autor recomienda instalar Visual Studio y marcar Desktop Development with C++.
Yo trataré de usar VSC
NOTA: siempre debe haber un archivo 'main.cpp' que arranque la aplicación.
TIP:también puede ser con extensión .cc

					USAR C++ EN LINUX CON VSC

Fuente: https://www.youtube.com/watch?v=tB8SxkuwGVo&ab_channel=SevivonStudio
Para compilar C++ necesito el interprete para C y C++.Algunas versiones de Linux ya lo traen asi que lo mejor es comprobarlo:
>gcc --version <- version para C
>g++ --version <- version para C++ tengo la 9.4.0

* Instalar el compilador para C++ me va a instalar el de C(por eso me coinciden las versiones)
>sudo apt install g++ <- por si no lo tuviera
Puedo volver a comprobarlo con:
>which gcc g++
>dpkg --list | grep compiler <- para ver todos los compiladores que tengo

TIP: para descomprimir e instalar un paquete .deb en LINUX:
>sudo dpkg -i <archivo.deb> <- desempaqueta e instala gracias al -i

IMPORTANTE: para trabajar en C/C++ en VSC necesitaré la extensión de Microsoft y otra 

					ESTRUCTURA DE UN PROGRAMA C++

Para que el programa funcione y compile voy a necesitar varias cosas:
1- voy a necesitar la función main.En C++ retorna un int:
int main(){ return 0; }

2- voy a necesitar alguna directiva y namespace.En cuanto use un namespace ya no tengo que ponerlo antes(std::cout pasará a cout) 
#include <iostream>
using namespace std;

3- Para compilar puedo usar g++ -o main main.cpp donde el primer argumento es el nombre del archivo final(que será un ejecutable) y el segundo el file a compilar.
Despues ejecuto el ejecutable con bash,si estoy en Linux:
>./main <- veré el cout de momento

				VIDEO 69 ENTRADA Y SALIDA POR CONSOLA

Primero que nada puedo usar un namespace para evitar tener que escribirlo.Para dar un salto de linea tendré que usar std::endl y para imprimir std::cout.
Para tomar la entrada por consola usaré std::cin.Normalmente guardaré la entrada en una variable:
Fijate que cout llevará << y cin >> en la otra dirección.

En el main.cc | main.cpp
#include <iostream>
using namespace std;

int main(){
  /* fijate que debo mandar los endl(endlines) */
  std::cout << "Bienvenido al curso de C++" << std::endl;
  std::cout << "Estamos empezando con los namespaces" << std::endl;
  string variable;
  cout << "Inserta un string..." << endl;
  std::cin >> variable;
  cout << "has escrito:" << variable << endl;
  return 0;
}

					VIDEO 70 TIPOS DE DATOS EN C++


Dentro de C++ hay varios tipos de datos principales.

1- int: se usa para guardar numeros enteros,es decir,sin decimales( int nombre = 3;)
NOTA: int hoja = 9.3; esto dará un error,pues es un double
TIP: puedo declarar una variable dandole el tipo y nombre y asignarle despues un valor:
int nota;
nota = 5;

2- double: permite guardar valores númericos con decimales
double exacto = 3.6;
double ultimo = -89.2

3- char: char sólo me sirve para guardar un carácter alfanúmerico,da igual que sea una letra o un número
char curso = 'a';
char agua = '2'; <- ojo que no es un número,es un carácter alfanumérico(diría que es un string)

4- string: el tipo string me permite almacenar palabras y/o textos:
string revista = "Navidad";
string papel = "Colegio";
Los strings se guardan con comillas dobles siempre ??

5- bool: variable lógica que permite almacenar sólo true ó false.En C++ si pongo 1 o 0 es lo mismo.Lo convertirá a true | false.

De momento me valdrá con estos primitivos

				VIDEO 71 COMENTARIOS 

En C++ puedo usar un comentario monolinea con // y uno multilinea con /* */.Es igual que en Java.

				VIDEO 72 STRING Y GET LINE

Si tuviera el siguiente código:
string entrada;
cin >> entrada;
cout << entrada << endl;
Si escribo más de una palabra como "playa de Salamanca" veré sólo la palabra "playa" y el salto de linea.¿Como puedo hacer para coger strings de más de un elemento?.
IMPORTANTE: necesitaré una nueva librería llamada string,aparte de la iostream que ya estoy incluyendo:
#include <iostream>;
#include <string>;
using namespace std;

int main(){
  string entrada;
  getline(cin,entrada); <- con getline cogeré toda la linea,hasta que haya un salto.Fijate que me pide dos argumentos,el método cin y la variable donde acumular el valor rescatado	
  cout << entrada << endl;

			  VIDEO 73 OPERADORES Y SENTENCIAS	

Veamos los operadores de suma,resta,multiplicación,división y módulo.Realmente no tienen ciencia alguna,más que respetar la sintaxis de C++:


int main(){
  int a;
  int b;
  cout << "Inserte dos enteros a sumar:" << endl;
  cin >> a >> b;
  cout << "El resultado es: " << a + b << endl;

  double x;
  double y;
  cout << "Inserte dos decimales a multiplicar:" << endl;
  cin >> x >> y;
  cout << "La multiplicación es: " << x * y << endl;
}
TIP: en vim borro hasta el final del file con dG


			SECCION 17 CONDICIONALES Y BUCLES


La estructura condicional if | if/else | if/elseif/else permite cambiar el flujo del programa en base a condiciones.Es algo básico en programación.
TIP: fijate que he usado la forma corta de los if ya que es sólo una instrucción.Necesitaré las llaves sin son más de una:

int main(){
  float nota;
  cout << "Inserte una nota: " << endl;
  cin >> nota; 
  if(nota >= 5) cout << "El estudiante ha aprobado" << endl;
  else cout << "El estudiante ha suspendido" << endl;
}

			VIDEO 75 MÚLTIPLES IFs

Muchas veces necesitaré más de un if.En ese caso necesitaré de la keyword 'else if'.Recuerda que las condiciones se leen secuencialmente.			

  int edad;
  cout << "Inserte la edad de la persona:" << endl;
  cin >> edad;
  if (edad >= 1 && edad <= 3)
    cout << "la persona es un bebé" << endl;
  else if (edad > 3 && edad < 18)
    cout << "la persona es joven" << endl;
  else
    cout << "la persona es adulta" << endl;
}

			VIDEO 76 PRACTICA COMPARISON OF WORDS

int main()
{
  cout << "Inserta la palabra 1" << endl;
  string word1;
  cin >> word1;
  cout << "Inserta la palabra 2" << endl;
  string word2;
  cin >> word2;
  if (word1 < word2)
    cout << word2 << " " << word1 << endl;
  else if (word1 > word2)
    cout << word1 << " " << word2 << endl;
  else
    cout << word1 << " " << word2 << endl;
  return 0;
}		

			VIDEO 77 RELOJ DIGITAL

Fijate que la clave estuvo en el módulo:

int main()
{
  cout << "bienvenido al programa AddOneSecond.Por favor inserte las horas:" << endl;
  int h, m, s;
  cin >> h;
  cout << "Por favor inserte los minutos:" << endl;
  cin >> m;
  cout << "Por favor inserte los segundos:" << endl;
  cin >> s;
  s = s++;
  /* fijate que la clave es el módulo asinto */
  if (s >= 60) { s %= 60; m += 1; }
  if (m >= 60) { m %= 60; h += 1; }
  if(h >=24){ h %= 24; }
  /* pasar a formato digital */
  cout << "La hora insertada más un segundo es:" << endl;
  if(h < 10) cout << "0";
  cout << h << ":";
  if(m < 10) cout << "0";
  cout << m << ":";
  if(s < 10) cout << "0";
  cout << s << endl;
  return 0;
}

			 VIDEO 78 BUCLE FOR 

Los bucles son simples repeticiones donde ejecutar una misma instrucción sobre cada repetición.La sintaxis es exactamente igual que en Java:
for(int i=0;i < 10; i++){
  cout << "iteracion" << i << endl; 

			  VIDEO 79 ESTRUCTURA WHILE

El segundo tipo de estructura repetitiva dentro de C++ es el bucle while.Se usa cuando no se sabe el nº de repeticiones(bucle indeterminado)			  
while(condicion) { instrucción repetida }

int numeroveces;
cin >> numeroveces;

while(numeroveces >= 0) {
 cout << "xx" << endl;
 --numeroveces;
 }"
