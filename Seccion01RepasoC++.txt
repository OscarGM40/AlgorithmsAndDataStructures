
Comenzaremos con la intro al lenguaje C++.Veremos los siguientes fundamentos:

1- Estructura de un programa en C++
2- Conceptos de entrada y salida (I/O)
3- Tipado de Datos y Variables
4- Vectores multidimensionales y monodimensionales
5- Sentencias Condicionales 
6- Bucles
7- Tuplas

					VIDEO 66 CONCEPTOS ESENCIALES

Algoritmo: un algoritmo no es más que un método para resolver un problema.Normalmente se describe como una secuencia de pasos

Lenguaje de programación: es un "idioma" usado para describir/mandar instrucciones a un ordenador.Esta compuesto de datos e instrucciones.
Los lenguajes de programación tienen una sintaxis y semántica muy estrictas

Programa de ordenador: no es más que un algoritmo(mejor una secuencia de instrucciones) escrito en un lenguaje de programación que ejecuta una cierta tarea:
calcular una raiz cuadrada
calcular el nº de veces que aparece una palabra en un libro
reproducir un archivo de musica
calcular el camino más corto entre dos ciudades

NOTA: los ordenadores sólo entienden instrucciones de muy bajo nivel(lenguaje máquina) mientras que el software está usualmente construido usando lenguajes de alto nivel.
Un lenguaje de alto nivel tiene:
1- Mayor productividad
2- Mayor legibilidad
4- Compilación más simple(y más rápida)
IMPORTANTE: el compilador de cada lenguaje traduce un lenguaje de alto nivel a lenguaje máquina automáticamente(el lenguaje máquina son 0s y 1s,es decir a binario)

					INSTALACIONES NECESARIAS

El autor recomienda instalar Visual Studio y marcar Desktop Development with C++.
Yo trataré de usar VSC
NOTA: siempre debe haber un archivo 'main.cpp' que arranque la aplicación.
TIP:también puede ser con extensión .cc

					USAR C++ EN LINUX CON VSC

Fuente: https://www.youtube.com/watch?v=tB8SxkuwGVo&ab_channel=SevivonStudio
Para compilar C++ necesito el interprete para C y C++.Algunas versiones de Linux ya lo traen asi que lo mejor es comprobarlo:
>gcc --version <- version para C
>g++ --version <- version para C++ tengo la 9.4.0

* Instalar el compilador para C++ me va a instalar el de C(por eso me coinciden las versiones)
>sudo apt install g++ <- por si no lo tuviera
Puedo volver a comprobarlo con:
>which gcc g++
>dpkg --list | grep compiler <- para ver todos los compiladores que tengo

TIP: para descomprimir e instalar un paquete .deb en LINUX:
>sudo dpkg -i <archivo.deb> <- desempaqueta e instala gracias al -i

IMPORTANTE: para trabajar en C/C++ en VSC necesitaré la extensión de Microsoft y otra 

					ESTRUCTURA DE UN PROGRAMA C++

Para que el programa funcione y compile voy a necesitar varias cosas:
1- voy a necesitar la función main.En C++ retorna un int:
int main(){ return 0; }

2- voy a necesitar alguna directiva y namespace.En cuanto use un namespace ya no tengo que ponerlo antes(std::cout pasará a cout) 
#include <iostream>
using namespace std;

3- Para compilar puedo usar g++ -o main main.cpp donde el primer argumento es el nombre del archivo final(que será un ejecutable) y el segundo el file a compilar.
Despues ejecuto el ejecutable con bash,si estoy en Linux:
>./main <- veré el cout de momento

				VIDEO 69 ENTRADA Y SALIDA POR CONSOLA

Primero que nada puedo usar un namespace para evitar tener que escribirlo.Para dar un salto de linea tendré que usar std::endl y para imprimir std::cout.
Para tomar la entrada por consola usaré std::cin.Normalmente guardaré la entrada en una variable:
Fijate que cout llevará << y cin >> en la otra dirección.

En el main.cc | main.cpp
#include <iostream>
using namespace std;

int main(){
  /* fijate que debo mandar los endl(endlines) */
  std::cout << "Bienvenido al curso de C++" << std::endl;
  std::cout << "Estamos empezando con los namespaces" << std::endl;
  string variable;
  cout << "Inserta un string..." << endl;
  std::cin >> variable;
  cout << "has escrito:" << variable << endl;
  return 0;
}

					VIDEO 70 TIPOS DE DATOS EN C++


Dentro de C++ hay varios tipos de datos principales.

1- int: se usa para guardar numeros enteros,es decir,sin decimales( int nombre = 3;)
NOTA: int hoja = 9.3; esto dará un error,pues es un double
TIP: puedo declarar una variable dandole el tipo y nombre y asignarle despues un valor:
int nota;
nota = 5;

2- double: permite guardar valores númericos con decimales
double exacto = 3.6;
double ultimo = -89.2

3- char: char sólo me sirve para guardar un carácter alfanúmerico,da igual que sea una letra o un número
char curso = 'a';
char agua = '2'; <- ojo que no es un número,es un carácter alfanumérico(diría que es un string)

4- string: el tipo string me permite almacenar palabras y/o textos:
string revista = "Navidad";
string papel = "Colegio";
Los strings se guardan con comillas dobles siempre ??

5- bool: variable lógica que permite almacenar sólo true ó false.En C++ si pongo 1 o 0 es lo mismo.Lo convertirá a true | false.

De momento me valdrá con estos primitivos

				VIDEO 71 COMENTARIOS 

En C++ puedo usar un comentario monolinea con // y uno multilinea con /* */.Es igual que en Java.

				VIDEO 72 STRING Y GET LINE

Si tuviera el siguiente código:
string entrada;
cin >> entrada;
cout << entrada << endl;
Si escribo más de una palabra como "playa de Salamanca" veré sólo la palabra "playa" y el salto de linea.¿Como puedo hacer para coger strings de más de un elemento?.
IMPORTANTE: necesitaré una nueva librería llamada string,aparte de la iostream que ya estoy incluyendo:
#include <iostream>;
#include <string>;
using namespace std;

int main(){
  string entrada;
  getline(cin,entrada); <- con getline cogeré toda la linea,hasta que haya un salto.Fijate que me pide dos argumentos,el método cin y la variable donde acumular el valor rescatado	
  cout << entrada << endl;

			  VIDEO 73 OPERADORES Y SENTENCIAS	

Veamos los operadores de suma,resta,multiplicación,división y módulo.Realmente no tienen ciencia alguna,más que respetar la sintaxis de C++:


int main(){
  int a;
  int b;
  cout << "Inserte dos enteros a sumar:" << endl;
  cin >> a >> b;
  cout << "El resultado es: " << a + b << endl;

  double x;
  double y;
  cout << "Inserte dos decimales a multiplicar:" << endl;
  cin >> x >> y;
  cout << "La multiplicación es: " << x * y << endl;
}
TIP: en vim borro hasta el final del file con dG


			SECCION 17 CONDICIONALES Y BUCLES


La estructura condicional if | if/else | if/elseif/else permite cambiar el flujo del programa en base a condiciones.Es algo básico en programación.
TIP: fijate que he usado la forma corta de los if ya que es sólo una instrucción.Necesitaré las llaves sin son más de una:

int main(){
  float nota;
  cout << "Inserte una nota: " << endl;
  cin >> nota; 
  if(nota >= 5) cout << "El estudiante ha aprobado" << endl;
  else cout << "El estudiante ha suspendido" << endl;
}

			VIDEO 75 MÚLTIPLES IFs

Muchas veces necesitaré más de un if.En ese caso necesitaré de la keyword 'else if'.Recuerda que las condiciones se leen secuencialmente.			

  int edad;
  cout << "Inserte la edad de la persona:" << endl;
  cin >> edad;
  if (edad >= 1 && edad <= 3)
    cout << "la persona es un bebé" << endl;
  else if (edad > 3 && edad < 18)
    cout << "la persona es joven" << endl;
  else
    cout << "la persona es adulta" << endl;
}

			VIDEO 76 PRACTICA COMPARISON OF WORDS

int main()
{
  cout << "Inserta la palabra 1" << endl;
  string word1;
  cin >> word1;
  cout << "Inserta la palabra 2" << endl;
  string word2;
  cin >> word2;
  if (word1 < word2)
    cout << word2 << " " << word1 << endl;
  else if (word1 > word2)
    cout << word1 << " " << word2 << endl;
  else
    cout << word1 << " " << word2 << endl;
  return 0;
}		

			VIDEO 77 RELOJ DIGITAL

Fijate que la clave estuvo en el módulo:

int main()
{
  cout << "bienvenido al programa AddOneSecond.Por favor inserte las horas:" << endl;
  int h, m, s;
  cin >> h;
  cout << "Por favor inserte los minutos:" << endl;
  cin >> m;
  cout << "Por favor inserte los segundos:" << endl;
  cin >> s;
  s = s++;
  /* fijate que la clave es el módulo asinto */
  if (s >= 60) { s %= 60; m += 1; }
  if (m >= 60) { m %= 60; h += 1; }
  if(h >=24){ h %= 24; }
  /* pasar a formato digital */
  cout << "La hora insertada más un segundo es:" << endl;
  if(h < 10) cout << "0";
  cout << h << ":";
  if(m < 10) cout << "0";
  cout << m << ":";
  if(s < 10) cout << "0";
  cout << s << endl;
  return 0;
}

			 VIDEO 78 BUCLE FOR 

Los bucles son simples repeticiones donde ejecutar una misma instrucción sobre cada repetición.La sintaxis es exactamente igual que en Java:
for(int i=0;i < 10; i++){
  cout << "iteracion" << i << endl; 

			  VIDEO 79 ESTRUCTURA WHILE

El segundo tipo de estructura repetitiva dentro de C++ es el bucle while.Se usa cuando no se sabe el nº de repeticiones(bucle indeterminado)			  
while(condicion) { instrucción repetida }

int numeroveces;
cin >> numeroveces;

while(numeroveces >= 0) {
 cout << "xx" << endl;
 --numeroveces;
 }"

			VIDEO 80 EJERCICIO SUM OF SQUARES CON BUCLES

Escriba un programa que lea un nº natural n, e imprima el resultado de la siguiente suma:
1 a la dos + 2 a la dos + (n-1) a la dos + n a la dos:

int main()
{
  cout << "Bienvenido a Sum of Squares.Por favor,introduzca un entero" << endl;
  int numb;
  int total=0;
  cin >> numb;

  for (int i = 1; i <= numb; ++i)
  {
    total += i * i;
  }
  cout << "el sumatorio es: " << total << endl;
  return 0;
}
Sencillo.
NOTA:las librerias como #include <iostream> añaden funcionalidad.En este caso me dan acceso a los objetos cout y cin.Otra forma de hacer el salto de linea es usar \n en vez de << endl;
TIP: >> es el extraction operator y se usa con cin,mientras que << es el insertion operator y se usa con cout
Puedo declarar una constante en C++ con la keyword const.

			VIDEO 81 EJERCICIO MATH OPERATIONS CON BUCLES

Fijate en el uso de cout.setf(ios::fixed) para habilitar decimales y en cout.precision(2) para fijar su nº máximo:

int main()
{
  // impongo la condición de usar decimales y no enteros asi:
  cout.setf(ios::fixed);
  // impongo la condición de usar estrictamente dos decimales asi:
  cout.precision(2);

  cout << "Bienvenido a Math operations: " << endl;
  string operacion = "";
  double numA, numB;

  while (operacion != "parar")
  {
    cout << "Indique tipo de operacion(suma|resta|cambio|parar):\n";

    cin >> operacion;
    if (operacion == "suma")
    {
      cout << "Indique primer digito a sumar\n";
      cin >> numA;
      cout << "Indique segundo digito a sumar\n";
      cin >> numB;
      cout << "suma: " << numA + numB;
    }
    else if (operacion == "resta")
    {
      cout << "Indique primer digito a restar\n";
      cin >> numA;
      cout << "Indique segundo digito a restar\n";
      cin >> numB;
      cout << "resta: " << numA - numB;
    }

    else if (operacion == "cambio")
    {
      cout << "Inserte numero a cambiar valor absoluto\n";
      /* fijate que multiplicar por -1 también me vale para la inversa aditiva */
      cin >> numA;
      if(numA > 0) cout << 0 - numA;
      if(numA < 0) cout << 0 + (-numA);
    }
    cout << endl;

  }
  return 0;
}

Fijate en su solución:
int main() {
  cout.setf(ios:fixed);
  cout.precision(2);
  
  string word;
  double a, b;
  while(cin >> word and word != "parar"){ <- ya de paso inserta el cin muy inteligente
    cin >> a;
    if(word == "cambio") cout << a * -1; <- con -1 hago el -abs
    else{
      cin >> b; <- si no es cambio pido el otro arg
      if(word == "suma") cout << a + b;
      else if(word == "resta") cout << a - b;
      }
      cout << endl;

Fijate que he repetido mucho código,podria haberlo echo mucho más simple.

			SECCION 18 FUNCIONES Y RECURSIVIDAD

En esta sección veré como crear funciones y procedimientos en C++,además de algoritmos recursivos.Ya veré como obtener la recursividad mediante funciones recursivas.

La principal diferencia entre una funcion y un procedimiento es que una funcion retorna un valor y un procedimiento NO.
Un procedimiento no es más que hacer una serie de cambios o instrucciones que no retornan ningun valor(impresiones a consola,modificaciones sin retorno,etc).Se declara con el comando void.La sintaxis es: void <name> (parametros){ instrucciones }

NOTA: modularizar un programa usando funciones y/archivos es algo básico.La legiblidad y simplicidad mejora mucho al refactorizar código en más funciones que la función principal main.

void bienvenida(){
    cout << "Bienvenido al programa" << endl;
    cout << "Preparese para comenzar" << endl;
};

void edad(){
  int a;
  cout << "Ingrese su edad: \n";
  cin >> a;
  cout << "Su edad es: " << a << endl;
}

int main() {
  bienvenida();
  edad();
  return 0;
}

Por otro lado,si es una funcion no será void sino del tipo que se retorne:

float getMax(float a, float b)
{
  if (a > b)
    return a;
  else if (a == b)
    return a;
  else
    return b;
}
De nuevo hay que llamarla con los valores correctos:
int main()
{
  cout << "Inserte dos numeros: \n";
  float a, b;
  cin >> a >> b;
  cout << "El mayor es: " << getMax(a, b) << endl;
}
TIP: si uso un procedimento que no retorna nada no puedo hacerle cout.
cout << edad() <- no tiene sentido, edad ya llama a cout
Sin embargo,si tiene sentido esto
cout << getMax(3,4) <- pues imprimirá el retorno de la función.
Es decir hacer el cout de un procedimiento no tiene sentido pues no retorna nada.

		VIDEO 83 FUNCIONES POR REFERENCIA(&) - EJERCICIO UNO

El simbolo que representa paso por referencia en C++ es el ampersand(&).Cada vez que pase una variable o argumento por referencia,el espacio en memoria al que apunta esa variable se lo pasaré a la siguiente variable.
De una manera más simple,si hago:
int prueba(int& a, int& b){
  a = 5;
Podré cambiar a,ya que la he pasado por referencia.

void swap2(int& a, int& b)
{
  int temp = a;
  a = b;
  b = temp;
}

int main(){
  cout << "Ingrese dos numeros: \n";
  int a, b;
  cin >> a >> b;
  cout << "Antes de intercambiar: " << a << " " << b << endl;
  swap2(a, b);
  cout << "Despues de intercambiar: " << a << " " << b << endl;
  return 0;
}
NOTA: std es la libreria standard de C++.Parece que traerla siempre es algo básico en un programa.

		VIDEO 84 EJERCICIO TIME DESCOMPOSITION CON PASO POR REFERENCIA

Escribe un procedimiento que dada una catidad de segundo compute cuantas horas,minutos y segundos representa:
void decompose(int seg, int& h,int& m, int& s){
 s = seg % 60;
 m = (seg/60) % 60;
 h = (seg/3600);

Hay más formas de hacerlo.

		VIDEO 85 FACTORIAL ITERATIVO

Escribir una funcion que calcule el factorial usando iteraciones.

long factorialIterativo(long n)
{
  long factorial = 1;
  for (int i = 1; i <= n; ++i)
  {
    factorial *= i;
  }
  return factorial;
}

		VIDEO 86 FACTORIAL RECURSIVO

Mismo ejercicio pero con recursividad.Fijate que la recursividad es simplemente una función que se llama a si misma.Recuerda que hay que pararla.

int calcularFactorial(int n) {
  if(n == 0){ return 1; }
  else{ return n * calcularFactorial(n-1); }
  }
Observo que la función se llama a si misma === recursividad  

Fijate como ha imprimido él el programa
int main(){
  int a;
  while(cin >> a){
    cout << factorial(a) << endl; <- muy bueno

		VIDEO 87 DISTANCIA AL ORIGEN

TIP: recuerda la diferencia entre funcion iterativa y función recursiva.Y la diferencia entre el inverso aditivo y el inverso multiplicativo (5 y -5 vs 5 y 1/5).
Fijate que calcularé la distancia al punto 0,0:

//origen(x,y) = (0,0)
double dist_or(double x, double y){
  // calcular la raiz cuadrada de x al cuadrado más y al cuadrado
  // necesitaré un vector director,en este caso siempre es al origen
  return sqrt((x*x) + (y*y));
}

int main() {
  cout << "Inserte dos numeros reales para calcular la distancia al origen: " << endl;
  double a, b;
  while(cin >> a >> b){
    cout << "La distancia es: " << dist_or(a,b) << endl;
  }
  return 0;
}

		VIDEO 88 FATTEN NUMBERS -EJERCICIO RECURSION

Este ejercicio de engrose de numeros simplemente recorre un numero n de x posiciones y compara la posicion actual y la siguiente devolviendo la mayor.Por ejemplo 301034047 dará 333334447
Como cualquier funcion recursiva tendré un paso base.En este caso es si n es menor que 10
Fijate que la clave estuvo en los modulos de 10 y entrar hasta el final del numero:

int maximo(int a, int b){
  return a > b ? a : b;
}
int fatten(int x)
{
  /* paso base */
  if (x < 10) return x;
  else {
    /* paso inductivo */
    int n = x % 10;
    int fn = fatten(x/10) % 10;
    int valor = maximo(n, fn);
    return 10 * fatten(x/10) + valor;
  }
  
}

int main()
{
  int x;
  while(cin >> x)
    cout << fatten(x) << endl;
}
Como actua: tengo 902,como no es menor entra al else,en n meto las unidades(x%10),o sea 2.En fn meto a( 902/10

			SECCION 19 VECTORES MULTIDIMENSIONALES

Un vector no es más que una estructura de dato que engrupa variables del mismo tipo.Asi pues,podría decir que es una colección de variables.
La declaración de un vector en C++ es con la keyword vector<T> nombreArbitrario(n) donde n es el nº de elementos del vector,es decir que hay que darle una capacidad inicial.
>vector <int> numeros(6);
Recuerda que en programación se empieza a contar desde 0,asi pues un vector tendrá los indices desde 0 hasta n - 1 donde n fue el tamaño inicial.
IMPORTANTE: para trabajar con vectores en C++ tendré que incluir la libreria vector,pues no vienen en el core

TIP: en vectores se trabaja mucho con bucles.Es muy común recorrerlos.

int main() {
  vector <float> notas(5); 
  for(int i = 0; i < 5; ++i) {
    cout << "Escriba las notas de los 5 alumnos:\n";
    cin >> notas[i];
  }
  for(int i = 0; i < 5; ++i) {
    cout << "Las notas insertadas son: " << notas[i] << endl;
  }
}
#include <vector>

			VIDEO 91 VECTORES - VALOR MINIMO

Calcular el valor minimo de un vector:

int main() {
  cout << "Inserte el numero de posiciones del vector: " << endl;
  int n;
  cin >> n;
  vector<int> numeros(n);

  for(int i = 0; i < n; ++i){
    cout << "Inserte la posicion " << i << endl; 
    cin >> numeros[i];
  }

  int min = numeros[0];

  for(int j = 1; j < n; ++j){
    if(numeros[j] < min) {
      min = numeros[j];
    }
  }
  cout << "el minimo es: " << min << endl;

}		


